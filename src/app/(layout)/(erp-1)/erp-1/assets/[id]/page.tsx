"use client"

import { useParams } from "next/navigation"
import api from "@/lib/axios"
import React, { useEffect, useMemo, useState } from "react"
import { DynamicForm } from "@/components/ui/dynamic-form"
import type { Field } from "@/components/ui/dynamic-form"
import { toast } from "sonner"
import { Assets,AssetsRequest } from "@/api/swagger"

export default function GeneratedFormPage() {
	//#region [STATE]
	const params = useParams()
	const id = params?.id as string | undefined
	const [initialData, setInitialData] = useState<Assets| null>(null)
	const [isEditing, setIsEditing] = useState<boolean>(!id) // üñäÔ∏è M·∫∑c ƒë·ªãnh n·∫øu c√≥ id th√¨ ch·ªâ xem, kh√¥ng s·ª≠a
	//#endregion
	
	//#region [API FUNCTION] (ƒë·ªÉ t√°i s·ª≠ d·ª•ng trong Handle functions)
	async function getPartnerById(id: string) {
		try {
			const res = await api.get(`/api/assets/${id}`)
			setInitialData(res.data)
			console.log("D·ªØ li·ªáu t√†i s·∫£n:", res.data)
		} catch (err) {
			console.error("L·ªói khi load t√†i s·∫£n:", err )
			toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t√†i s·∫£n")
		}
	}
	//#endregion

	//#region [LOADING DATA] (ch·∫°y ngay khi t·∫£i trang ho·∫∑c c√≥ event)
	useEffect(() => {
		console.log("üü° ID param nh·∫≠n ƒë∆∞·ª£c:", id)
		if (id) getPartnerById(id)
	}, [id])
	//#endregion

	//#region [INIT FORM] (Config form)
	const fields: Field[] = useMemo(() => [
		{
			"id": "text-1761224908242",
			"label": "T√™n",
			"placeholder": "",
			"type": "text",
			"required": true,
			"disabled": false,
			"defaultValue": initialData ? initialData.name : "",
			"colSpan": 2
		},
		{
			"id": "date-1761224917647",
			"label": "Ng√†y mua",
			"placeholder": "",
			"type": "date",
			"required": true,
			"disabled": false,
			"defaultValue": initialData ? initialData.purchaseDate : "",
			"colSpan": 1
		},
		{
			"id": "select-1761224921188",
			"label": "Tr·∫°ng th√°i",
			"placeholder": "",
			"type": "select",
			"required": true,
			"disabled": false,
			"defaultValue": initialData ? initialData.status : "",
			"colSpan": 1,
			"options": [
				{ "value": "ƒêang s·ª≠ d·ª•ng", "name": "ƒêang s·ª≠ d·ª•ng" },
				{ "value": "B·∫£o tr√¨", "name": "B·∫£o tr√¨" },
				{ "value": "Ch∆∞a s·ª≠ d·ª•ng", "name": "Ch∆∞a s·ª≠ d·ª•ng" },
				{ "value": "Thanh l√Ω", "name": "Thanh l√Ω" },
				{ "value": "ƒê√£ ƒëi·ªÅu chuy·ªÉn", "name": "ƒê√£ ƒëi·ªÅu chuy·ªÉn" },
				{ "value": "M·∫•t / H·ªèng", "name": "M·∫•t / H·ªèng" },
				{ "value": "Ch·ªù ph√™ duy·ªát", "name": "Ch·ªù ph√™ duy·ªát" }
			]
		}
		], [initialData])
	//#endregion

	//#region [HANDLE] (ch·∫Øc ch·∫Øn ƒëang ƒëc g√°n v√†o btn n√†o ƒë·∫•y)
	const handleSubmit = async (values: Record<string, unknown>) => {

		const assetsRequest: AssetsRequest = {
				userId: "d10d0f02-bc35-4cdc-8005-6cfe1323d9cb",
				name: values["text-1761224908242"] as string,
				purchaseDate: values["date-1761224917647"] as Date,
				status: values["select-1761224921188"] as string
			}

		try {
			const res = id
				? await api.put(`/api/assets/${id}`, assetsRequest)
				: await api.post("/api/assets", assetsRequest)

			toast.success(id ? "C·∫≠p nh·∫≠t t√†i s·∫£n th√†nh c√¥ng!" : "T·∫°o t√†i s·∫£n th√†nh c√¥ng!")
			console.log("Transaction saved:", res.data)
		} catch (err) {
			console.error("L·ªói khi l∆∞u t√†i s·∫£n:", err)
			toast.error(`L·ªói khi l∆∞u t√†i s·∫£n: ${err}`)
		}
	}
	//#endregion

	return (
		<div className="p-3">
		{id && !initialData ? (
			<p className="opacity-40">ƒêang t·∫£i d·ªØ li·ªáu...</p>
		) : (
			<DynamicForm
				title="T√†i s·∫£n"
				description={id ? "C·∫≠p nh·∫≠t th√¥ng tin t√†i s·∫£n" : "Nh·∫≠p th√¥ng tin t√†i s·∫£n m·ªõi"}
				fields={fields}
				readOnly={!isEditing} // üîí true = ch·ªâ xem, false = cho ph√©p nh·∫≠p
				onEditClick={() => setIsEditing(!isEditing)} // ‚úèÔ∏è Nh·∫•n ‚ÄúS·ª≠a‚Äù
				onSubmit={handleSubmit}
		/>
		)}
	</div>
	)
}
