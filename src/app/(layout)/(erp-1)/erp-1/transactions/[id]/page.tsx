"use client"

import { useParams } from "next/navigation"
import api from "@/lib/axios"
import React, { useEffect, useMemo, useState } from "react"
import { DynamicForm } from "@/components/ui/dynamic-form"
import type { Field } from "@/components/ui/dynamic-form"
import type { TransactionRequest } from "@/api/swagger/models/TransactionRequest"
import { toast } from "sonner"
import { Attachments, Partners, TransactionCategory, TransactionResponse } from "@/api/swagger"
import { toNameValue } from "@/utils/toNameValue"


export default function GeneratedFormPage() {
	//#region [STATE]
	// L·∫•y param [id] t·ª´ URL (v√≠ d·ª• /transactions/123)
	const params = useParams()
	const id = params?.id as string | undefined

	const [initialData, setInitialData] = useState<TransactionResponse| null>(null)
	const [isEditing, setIsEditing] = useState<boolean>(!id)
	const [partners, setPartners] = React.useState<Partners[]>([])
	const [transactionsCategory, setTransactionsCategory] = React.useState<TransactionCategory[]>([])
	
	//#endregion

	//#region [API FUNCTION] (ƒë·ªÉ t√°i s·ª≠ d·ª•ng trong Handle functions)
	async function getTransactionById(id: string) {
		try {
			console.log("üì° G·ªçi API l·∫•y giao d·ªãch v·ªõi ID:", id)
			const res = await api.get(`/api/transactions/${id}`)
			setInitialData(res.data)
			console.log("‚úÖ D·ªØ li·ªáu giao d·ªãch:", res.data)
		} catch (err) {
			console.error("‚ùå L·ªói khi load giao d·ªãch:", err )
			toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu giao d·ªãch")
		}
	}

	async function getAllPartners() {
		try {
			const res = await api.get(`/api/partners/all`)
			setPartners(res.data)
			console.log("D·ªØ li·ªáu ƒë·ªëi t√°c:", res)
		} catch (err) {
			console.error("L·ªói khi load ƒë·ªëi t√°c:", err )
			toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë·ªëi t√°c")
		}
	}

	async function getAllTransactionCategories() {
		try {
			const res = await api.get(`/api/transaction-category/all`)
			setTransactionsCategory(res.data)
			console.log("D·ªØ li·ªáu danh muc giao dich:", res)
		} catch (err) {
			console.error("L·ªói khi load danh muc giao dich:", err )
			toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh muc giao dich")
		}
	}
	//#endregion

	//#region [LOADING DATA] (ch·∫°y ngay khi t·∫£i trang ho·∫∑c c√≥ event)
	useEffect(() => {
		console.log("üü° ID param nh·∫≠n ƒë∆∞·ª£c:", id)
		if (id) getTransactionById(id)
	}, [id])

	React.useEffect(() => {
		getAllPartners()
		getAllTransactionCategories()
	}
	, [])
	const partnerOptions 				= useMemo(() => toNameValue(partners,"partnerId","name"), [partners])
	const transactionsCategoryOptions 	= useMemo(() => toNameValue(transactionsCategory,"transaction_category_id","name"), [transactionsCategory])
	
	//#endregion

	//#region [HANDLE] (ch·∫Øc ch·∫Øn ƒëang ƒëc g√°n v√†o btn n√†o ƒë·∫•y)
	const handleSubmit = async (values: Record<string, unknown>) => {

		// l·∫•y array attachmentId t·ª´ values.attachments
		const attachments = Array.isArray(values.attachments)
			? values.attachments.filter((a): a is { attachmentId: string } =>
				typeof a === "object" && !!a && "attachmentId" in a)
			: []
		const attachmentIds = attachments.map((a) => a.attachmentId)

		// t·∫°o object transactionrequest t·ª´ values v√† g√°n d√®fault
		const transactionrequest: TransactionRequest = {
			userId: "d10d0f02-bc35-4cdc-8005-6cfe1323d9cb", 
			partnerId: values["doitac"] as string,
			transactionCategoryId: values["danhMucGiaoDich"] as string,
			amount: Number(values["amount"]) || 0,
			transactionType: values["loaiGiaoDich"] as string,
			status: "PENDING",
			note: values["note"] as string,
			attachment_id: attachmentIds,
		}

		// g·ª≠i request t·∫°o transaction
		try {
			const res = id
				? await api.put(`/api/transactions/${id}`, transactionrequest)
				: await api.post("/api/transactions", transactionrequest)

			toast.success(id ? "C·∫≠p nh·∫≠t giao d·ªãch th√†nh c√¥ng!" : "T·∫°o giao d·ªãch th√†nh c√¥ng!")
			console.log("Transaction saved:", res.data)
		} catch (err) {
			console.error("‚ùå L·ªói khi l∆∞u giao d·ªãch:", err)
			toast.error(`L·ªói khi l∆∞u giao d·ªãch: ${err}`)
		}
	}
	//#endregion

	//#region [INIT FORM] (Config form)
	const fields: Field[] = useMemo(() => [
		{
			id: "doitac",
			label: "ƒê·ªëi t√°c",
			type: "select",
			colSpan: 1,
			required: false,
			options: partnerOptions,
			defaultValue: initialData?.partner?.partnerId ?? "",
		},
		{
			id: "danhMucGiaoDich",
			label: "Danh m·ª•c giao d·ªãch",
			type: "select",
			required: true,
			colSpan: 1,
			options: transactionsCategoryOptions,
			defaultValue: initialData?.transactionCategory?.transaction_category_id ?? "",
		},
		{
			id: "amount",
			label: "S·ªë ti·ªÅn giao d·ªãch",
			type: "number",
			required: true,
			colSpan: 1,
			defaultValue: initialData?.amount ?? 0,
		},
		{
			id: "loaiGiaoDich",
			label: "Lo·∫°i giao d·ªãch",
			type: "select",
			colSpan: 1,
			options: [
				{ value: "INCOME", name: "Thu" },
				{ value: "EXPENSE", name: "Chi" },
			],
			defaultValue: initialData?.transactionType ?? "INCOME",
		},
		{
			id: "note",
			label: "Ghi ch√∫",
			type: "textarea",
			colSpan: 2,
			defaultValue: initialData?.note ?? "",
		},
		{
			id: "attachments",
			label: "T·ªáp ƒë√≠nh k√®m",
			type: "file",
		disable: true,
			colSpan: 2,
			defaultValue: (initialData?.attachmentsList as Attachments[]) ?? [],
			},
	], [initialData,partnerOptions,transactionsCategoryOptions])
	//#endregion

	return (
		<div className="p-3">
		{id && !initialData ? (
			<p className="opacity-40">ƒêang t·∫£i d·ªØ li·ªáu...</p>
		) : (
			<DynamicForm
				title="Giao d·ªãch"
				description={id ? "C·∫≠p nh·∫≠t th√¥ng tin giao d·ªãch" : "Nh·∫≠p th√¥ng tin giao d·ªãch m·ªõi"}
				fields={fields}
				readOnly={!isEditing} // üîí true = ch·ªâ xem, false = cho ph√©p nh·∫≠p
				onEditClick={() => setIsEditing(!isEditing)} // ‚úèÔ∏è Nh·∫•n ‚ÄúS·ª≠a‚Äù
				onSubmit={handleSubmit}
		/>
		)}
	</div>
	)
}
