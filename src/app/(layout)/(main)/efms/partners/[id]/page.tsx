"use client"

import { useParams } from "next/navigation"
import api from "@/lib/axios"
import React, { useEffect, useMemo, useState } from "react"
import { DynamicForm } from "@/components/ui/dynamic-form"
import type { Field } from "@/components/ui/dynamic-form"
import { toast } from "sonner"
import { Partners, PartnersRequest } from "@/api/swagger"

export default function GeneratedFormPage() {
	//#region [STATE]
	const params = useParams()
	const id = params?.id as string | undefined
	const [initialData, setInitialData] = useState<Partners| null>(null)
	const [isEditing, setIsEditing] = useState<boolean>(!id) // üñäÔ∏è M·∫∑c ƒë·ªãnh n·∫øu c√≥ id th√¨ ch·ªâ xem, kh√¥ng s·ª≠a
	//#endregion
	
	//#region [API FUNCTION] (ƒë·ªÉ t√°i s·ª≠ d·ª•ng trong Handle functions)
	async function getPartnerById(id: string) {
		try {
			const res = await api.get(`/api/partners/${id}`)
			setInitialData(res.data)
			console.log("D·ªØ li·ªáu ƒë·ªëi t√°c:", res.data)
		} catch (err) {
			console.error("L·ªói khi load ƒë·ªëi t√°c:", err )
			toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë·ªëi t√°c")
		}
	}
	//#endregion

	//#region [LOADING DATA] (ch·∫°y ngay khi t·∫£i trang ho·∫∑c c√≥ event)
	useEffect(() => {
		console.log("üü° ID param nh·∫≠n ƒë∆∞·ª£c:", id)
		if (id) getPartnerById(id)
	}, [id])
	//#endregion

	//#region [INIT FORM] (Config form)
	const fields: Field[] = useMemo(() => [
		{
			"id": "name",
			"label": "T√™n ƒë·ªëi t√°c",
			"placeholder": "",
			"type": "text",
			"required": true,
			"disabled": false,
			"defaultValue": initialData?.name || "",
			"colSpan": 1
		},
		{
			"id": "type",
			"label": "T·ªáp ƒë·ªëi t√°c",
			"placeholder": "",
			"type": "select",
			"required": true,
			"disabled": false,
			"defaultValue": initialData?.type || "",
			"colSpan": 1,
			"options": [
			{
				"value": "CUSTOMER",
				"name": "Kh√°ch h√†ng"
			},
			{
				"value": "SUPPLIER",
				"name": "Nh√† cung c·∫•p"
			}
			]
		},
		{
			"id": "email",
			"label": "Email",
			"placeholder": "",
			"type": "email",
			"required": true,
			"disabled": false,
			"defaultValue": initialData?.email || "",
			"colSpan": 1
		},
		{
			"id": "phone",
			"label": "S·ªë ƒëi·ªán tho·∫°i",
			"placeholder": "",
			"type": "text",
			"required": false,
			"disabled": false,
			"defaultValue": initialData?.phone || "",
			"colSpan": 1
		},
		{
			"id": "address",
			"label": "ƒê·ªãa ch·ªâ",
			"placeholder": "",
			"type": "text",
			"required": false,
			"disabled": false,
			"defaultValue": initialData?.address || "",
			"colSpan": 1
		}
	], [initialData])
	//#endregion

	//#region [HANDLE] (ch·∫Øc ch·∫Øn ƒëang ƒëc g√°n v√†o btn n√†o ƒë·∫•y)
	const handleSubmit = async (values: Record<string, unknown>) => {

		const partnersrequest: PartnersRequest = {
			name: 		values["name"] as string,
			type: 		values["type"] as string,
			email: 		values["email"] as string,
			phone: 		values["phone"] as string,
			address: 	values["address"] as string
		}

		try {
			const res = id
				? await api.put(`/api/partners/${id}`, partnersrequest)
				: await api.post("/api/partners", partnersrequest)

			toast.success(id ? "C·∫≠p nh·∫≠t giao d·ªãch th√†nh c√¥ng!" : "T·∫°o giao d·ªãch th√†nh c√¥ng!")
			console.log("Transaction saved:", res.data)
		} catch (err) {
			console.error("L·ªói khi l∆∞u giao d·ªãch:", err)
			toast.error(`L·ªói khi l∆∞u giao d·ªãch: ${err}`)
		}
	}
	//#endregion

	return (
		<div className="p-3">
		{id && !initialData ? (
			<p className="opacity-40">ƒêang t·∫£i d·ªØ li·ªáu...</p>
		) : (
			<DynamicForm
				title="Giao d·ªãch"
				description={id ? "C·∫≠p nh·∫≠t th√¥ng tin giao d·ªãch" : "Nh·∫≠p th√¥ng tin giao d·ªãch m·ªõi"}
				fields={fields}
				readOnly={!isEditing} // üîí true = ch·ªâ xem, false = cho ph√©p nh·∫≠p
				onEditClick={() => setIsEditing(!isEditing)} // ‚úèÔ∏è Nh·∫•n ‚ÄúS·ª≠a‚Äù
				onSubmit={handleSubmit}
		/>
		)}
	</div>
	)
}
